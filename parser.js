// Generated by PEG.js v0.11.0-master.b7b87ea, https://pegjs.org/

import {
    CELL,
    STR_ESCAPED,
    STR_PLAIN,
    AGGREGATE,
    SUBTOTAL,
    NUMBER,
    COMPLEX_NUMBER,
    LIST,
    MATRIX,
    STRING,
    ANY,
    BOOLEAN,
    FUNCTION,
    ARGUMENTS,
    NULL,
    ARRAY,
    ERROR,
    DATE,
    TIME,
    DATETIME,
    TRACE,
    CELL_TRACE,
    HYPERLINK,
    NAVALUE,
    VVALUE,
    REFVALUE,
    NUMVALUE,
    DIV0,
    NULLE,
    NAMEE,
    GETTINGDATA,
    INLINE,
    HIDDEN,
    NATURALREF,
    CIRCULAR,
    OPERATION,
    R1C1PARTIAL,
    FUNCTIONCALL,
    RANGE,
    CC2Currency
} from "./types";
import functionDefinitions from "./functions";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  // istanbul ignore next
  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found, location) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    },

    not: function(expectation) {
      return "not " + describeExpectation(expectation.expected);
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleFunctions = { Start: peg$parseStart };
  var peg$startRuleFunction = peg$parseStart;

  var peg$c0 = "TRUE";
  var peg$c1 = "FALSE";
  var peg$c2 = "=";
  var peg$c3 = "'";
  var peg$c4 = "<>";
  var peg$c5 = "<=";
  var peg$c6 = ">=";
  var peg$c7 = "<";
  var peg$c8 = ">";
  var peg$c9 = "&";
  var peg$c10 = "+";
  var peg$c11 = "-";
  var peg$c12 = "*";
  var peg$c13 = "/";
  var peg$c14 = "^";
  var peg$c15 = "%";
  var peg$c16 = "{";
  var peg$c17 = ";";
  var peg$c18 = "}";
  var peg$c19 = ",";
  var peg$c20 = "(";
  var peg$c21 = ")";
  var peg$c22 = "!";
  var peg$c23 = "[";
  var peg$c24 = "]";
  var peg$c25 = "\\'";
  var peg$c26 = "\\]";
  var peg$c27 = "$";
  var peg$c28 = "R";
  var peg$c29 = "C";
  var peg$c30 = ":";
  var peg$c31 = " ";
  var peg$c32 = "\"\"";
  var peg$c33 = "\"";
  var peg$c34 = "\\\"";
  var peg$c35 = ".";

  var peg$r0 = /^[^'=+\-*\/&<>\^]/;
  var peg$r1 = /^[a-zA-Z]/;
  var peg$r2 = /^[a-zA-Z0-9_]/;
  var peg$r3 = /^[a-zA-Z0-9_.]/;
  var peg$r4 = /^[^']/;
  var peg$r5 = /^[^\]]/;
  var peg$r6 = /^[A-Z]/;
  var peg$r7 = /^[1-9]/;
  var peg$r8 = /^[0-9]/;
  var peg$r9 = /^[a-zA-Z0-9.]/;
  var peg$r10 = /^[^"]/;
  var peg$r11 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation("TRUE", false);
  var peg$e1 = peg$literalExpectation("FALSE", false);
  var peg$e2 = peg$literalExpectation("=", false);
  var peg$e3 = peg$literalExpectation("'", false);
  var peg$e4 = peg$classExpectation(["'", "=", "+", "-", "*", "/", "&", "<", ">", "^"], true, false);
  var peg$e5 = peg$anyExpectation();
  var peg$e6 = peg$literalExpectation("<>", false);
  var peg$e7 = peg$literalExpectation("<=", false);
  var peg$e8 = peg$literalExpectation(">=", false);
  var peg$e9 = peg$literalExpectation("<", false);
  var peg$e10 = peg$literalExpectation(">", false);
  var peg$e11 = peg$literalExpectation("&", false);
  var peg$e12 = peg$literalExpectation("+", false);
  var peg$e13 = peg$literalExpectation("-", false);
  var peg$e14 = peg$literalExpectation("*", false);
  var peg$e15 = peg$literalExpectation("/", false);
  var peg$e16 = peg$literalExpectation("^", false);
  var peg$e17 = peg$literalExpectation("%", false);
  var peg$e18 = peg$literalExpectation("{", false);
  var peg$e19 = peg$literalExpectation(";", false);
  var peg$e20 = peg$literalExpectation("}", false);
  var peg$e21 = peg$literalExpectation(",", false);
  var peg$e22 = peg$literalExpectation("(", false);
  var peg$e23 = peg$literalExpectation(")", false);
  var peg$e24 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e25 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e26 = peg$literalExpectation("!", false);
  var peg$e27 = peg$literalExpectation("[", false);
  var peg$e28 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "."], false, false);
  var peg$e29 = peg$literalExpectation("]", false);
  var peg$e30 = peg$literalExpectation("\\'", false);
  var peg$e31 = peg$classExpectation(["'"], true, false);
  var peg$e32 = peg$literalExpectation("\\]", false);
  var peg$e33 = peg$classExpectation(["]"], true, false);
  var peg$e34 = peg$literalExpectation("$", false);
  var peg$e35 = peg$classExpectation([["A", "Z"]], false, false);
  var peg$e36 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e37 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e38 = peg$literalExpectation("R", false);
  var peg$e39 = peg$literalExpectation("C", false);
  var peg$e40 = peg$literalExpectation(":", false);
  var peg$e41 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "."], false, false);
  var peg$e42 = peg$literalExpectation(" ", false);
  var peg$e43 = peg$literalExpectation("\"\"", false);
  var peg$e44 = peg$literalExpectation("\"", false);
  var peg$e45 = peg$literalExpectation("\\\"", false);
  var peg$e46 = peg$classExpectation(["\""], true, false);
  var peg$e47 = peg$otherExpectation("number");
  var peg$e48 = peg$otherExpectation("whitespace");

  var peg$f0 = function() { return { type: BOOLEAN, value: true, tree: { type: BOOLEAN, value: [true] } } };
  var peg$f1 = function() { return { type: BOOLEAN, value: false, tree: { type: BOOLEAN, value: [false] } } };
  var peg$f2 = function() { return { type: NULL, value: null, tree: { type: STR_PLAIN, value: [""] } } };
  var peg$f3 = function(exp) { return { ...exp, [CELL_TRACE]: exp[CELL_TRACE], tree: { type: OPERATION, value: ["=", exp.tree] } }; };
  var peg$f4 = function(str) { return { type: STRING, value: text().substring(1), meta: { type: STR_ESCAPED }, tree: { type: STR_ESCAPED, value: [text()] } }; };
  var peg$f5 = function() { return { type: STRING, value: text(), meta: { type: STR_PLAIN }, tree: { type: STR_PLAIN, value: [text()] } } };
  var peg$f6 = function(head, tail) {
        return tail.reduce(function(result, element) {
            // we have lots of special cases for booleans (Excel handels these differently to js)
          if (element[1] === "=") { return stdop(result, element[3], (x,y)=>{
              return x===y;
          }, BOOLEAN, "=") }
          if (element[1] === "<") { return stdop(result, element[3], (x,y)=>{
              if(x === true) { return false; }
              if(x === false) { return y === true; }
              if(y === true) { return true; }
              if(y === false) { return x !== true; }
              return x<y;
          }, BOOLEAN, "<") }
          if (element[1] === ">") { return stdop(result, element[3], (x,y)=>{
              if(x === true) { return y !== true; }
              if(x === false) { return y !== true && y !== false; }
              if(y === true) { return x === true; }
              if(y === false) { return !(x !== true && x !== false); }
              return x>y;
          }, BOOLEAN, ">") }
          if (element[1] === "<=") { return stdop(result, element[3], (x,y)=>{
              if(x === true) { return y === true; }
              if(x === false) { return y === true && y === false; }
              if(y === true) { return x !== true; }
              if(y === false) { return !(x === true && x === false); }
              return x<=y;
          }, BOOLEAN, "<=") }
          if (element[1] === ">=") { return stdop(result, element[3], (x,y)=>{
              if(x === true) { return true; }
              if(x === false) { return y !== true; }
              if(y === true) { return false; }
              if(y === false) { return x === true }
              return x>=y;
          }, BOOLEAN, ">=") }
          if (element[1] === "<>") { return stdop(result, element[3], (x,y)=>{
              return x!==y;
          }, BOOLEAN, "<>") }
        }, head);
      };
  var peg$f7 = function(head, tail) {
        return tail.reduce(function(result, element) {
          const checkType = typeOrError(STRING, undefined, STRING);
          if (element[1] === "&") { return stdop(checkType(result), checkType(element[3]), (x,y)=>`${x}${y}`, STRING, "&") }
        }, head);
      };
  var peg$f8 = function(head, tail) {
        return tail.reduce(function(result, element) {
          const checkType = typeOrError(NUMBER, undefined, NUMBER);
          if (element[1] === "+") { return stdop(checkType(result), checkType(element[3]), (x,y)=>(x||0)+(y||0), NUMBER, "+") }
          if (element[1] === "-") { return stdop(checkType(result), checkType(element[3]), (x,y)=>(x||0)-(y||0), NUMBER, "-") }
        }, head);
      };
  var peg$f9 = function(head, tail) {
        return tail.reduce(function(result, element) {
          const checkType = typeOrError(NUMBER, undefined, NUMBER);
          if (element[1] === "*") { return stdop(checkType(result), checkType(element[3]), (x,y)=>(x||0)*(y||0), NUMBER, "*") }
          if (element[1] === "/") { return stdop(checkType(result), checkType(element[3]), (x,y)=>(x||0)/(y||0), NUMBER, "/") }
        }, head);
      };
  var peg$f10 = function(head, tail) {
        return tail.reduce(function(result, element) {
          if (element[1] === "^") {
              const checkType = typeOrError(NUMBER, undefined, NUMBER);
          	const v = stdop(checkType(result), checkType(element[3]), (x,y)=>Math.pow((x||0),y), NUMBER, "^");
              if(element[3].value === 0 || element[3].value === "" || !element[3].value) {
                  return Object.assign(v, { type: ERROR, value: NUMVALUE }); // overwrite with error
              }
              return v;
          }
        }, head);
      };
  var peg$f11 = function(head, isPercent) {
        if(!isPercent) {
            return head;
        }
        const checkType = typeOrError(NUMBER, undefined, NUMBER);
        const headInNumber = checkType(head);
        const tree = { type: OPERATION, value: [head, "%"] };
        const meta = { left: head, [CELL_TRACE]: head[CELL_TRACE] };
        if(headInNumber.type === ERROR) {
            return { ...head, ...headInNumber, meta, tree, [CELL_TRACE]: head[CELL_TRACE] }
        }
        return { ...head, tree, type: NUMBER, value: headInNumber.value * 0.01, meta, [CELL_TRACE]: head[CELL_TRACE] }
      };
  var peg$f12 = function(isNegative, head) {
        if(!isNegative) {
            return head;
        }
        const checkType = typeOrError(NUMBER, undefined, NUMBER);
        const headInNumber = checkType(head);
        const tree = { type: OPERATION, value: ["-", head] };
        const meta = { left: head, [CELL_TRACE]: head[CELL_TRACE] };
        if(headInNumber.type === ERROR) {
            return { ...head, ...headInNumber, meta, tree, [CELL_TRACE]: head[CELL_TRACE] }
        }
        return { ...head, tree, type: NUMBER, value: headInNumber.value * -1, meta, [CELL_TRACE]: head[CELL_TRACE] }
      };
  var peg$f13 = function(inner, x) { return x; };
  var peg$f14 = function(inner, rows) {
      const Cell_Trace = inner.map(i => i[CELL_TRACE] || []);
      if(!rows.length) {
          return { type: LIST, tree: { type: LIST, value: inner.reduce((p, i) => [...p, i, ","], []) }, value: inner, meta: { type: INLINE }, [CELL_TRACE]: [].concat(...Cell_Trace) };
      }
      const treevalue = [inner.reduce((p, i) => [...p, i, ","], []), ...rows.map(r => r.reduce((p, i) => [...p, i, ","], []))].reduce((p, i) => [...p, i, ";"], []);
      return { type: MATRIX, tree: { type: MATRIX, value: treevalue }, value: [inner, ...rows], meta: { type: INLINE }, [CELL_TRACE]: [].concat(...Cell_Trace) };
  };
  var peg$f15 = function(member, x) {return x;};
  var peg$f16 = function(member, members) { return [member || { type: NULL }, ...members]; };
  var peg$f17 = function(expr) { return { ...expr, [CELL_TRACE]: expr[CELL_TRACE], tree: { type: OPERATION, value: ["(", expr.tree, ")"] } }; };
  var peg$f18 = function() { return { type: BOOLEAN, value: true, [CELL_TRACE]: [], tree: { type: BOOLEAN, value: ["TRUE"] } } };
  var peg$f19 = function() { return { type: BOOLEAN, value: false, [CELL_TRACE]: [], tree: { type: BOOLEAN, value: ["FALSE"] } } };
  var peg$f20 = function() { return text(); };
  var peg$f21 = function(t) { return { sheet: t, sheetraw: [t, "!"] }; };
  var peg$f22 = function(t, s) { return { ...s, workbook: t, workbookraw: ["[", t, "]"] } };
  var peg$f23 = function() { return text().replace(/\\'/g, "'"); };
  var peg$f24 = function(t) { return { sheet: t, sheetraw: [text().slice(0, -1), "!"] }  };
  var peg$f25 = function() { return { v: text().replace(/\\\]/g, "]"), r: text() }; };
  var peg$f26 = function(t1) { return { v: text().replace(/\\'/g, "'"), r: text() }; };
  var peg$f27 = function(t1, t2) { return { sheet: t2.v, workbook: t1.v, absraw: ["'[", t1.r, "]", t2.r, "'!"] }  };
  var peg$f28 = function(c) { return c; };
  var peg$f29 = function(loc, abscol, col, absrow) { return parseInt(text(), 10); };
  var peg$f30 = function(loc, abscol, col, absrow, row) {
      const c = col.reduce((sum, char) => sum*26+char.charCodeAt(0)-64, 0);
      const { row: crow, col: ccol } = currentcell;
      const locx = loc || {};
      let contextu = context;
      if(locx.workbook) {
      	contextu = contextu.getWorkbook(locx.workbook);
      }
      if(locx.sheet) {
      	contextu = contextu.getSheet(locx.sheet);
      }
      const workbookandsheettreevalue = locx.absraw || locx.sheetraw ? locx.workbookraw ? [...locx.workbookraw, ...locx.sheetraw] : ["", "", "", ...locx.sheetraw] : ["", "", "", "", ""] || ["", "", "", "", ""];
      const carg = { ...locx, row: row-1, col: c-1, type: NATURALREF };
      const v = contextu.getRow(row-1, carg).getCol(c-1, carg) || { value: null, type: "ERROR" };
      const inheritedCellTrace = v[CELL_TRACE] || [];
      const result = {
      	...v,
          tree: { type: CELL, value: [...workbookandsheettreevalue, abscol ? "$" : "", col.join(""), absrow ? "$" : "", row] },
      	type: v.type,
          meta: { ...locx, type: CELL, row: row, col: c, absrow: absrow === "$", abscol: abscol === "$", workbook: locx.workbook, sheet: locx.sheet },
          value: v.value,
          [CELL_TRACE]: inheritedCellTrace.concat([{row: row, col: c, workbook: locx.workbook, sheet: locx.sheet}]),
      };
      return result;
  };
  var peg$f31 = function(loc, row, col) {
      const { row: crow, col: ccol } = currentcell;
      let r = row.absolute ? row.cell : crow + row.cell;
      let c = col.absolute ? col.cell : ccol + col.cell;
      
      // loc:(CellSheetWorkbook)?
      const locx = loc || {};
      let contextu = context;
      if(locx.workbook) {
      	contextu = contextu.getWorkbook(locx.workbook);
      }
      if(locx.sheet) {
      	contextu = contextu.getSheet(locx.sheet);
      }
      const workbookandsheettreevalue = locx.absraw || locx.sheetraw ? locx.workbookraw ? [...locx.workbookraw, ...locx.sheetraw] : ["", "", "", ...locx.sheetraw] : ["", "", "", "", ""] || ["", "", "", "", ""];
      const carg = { ...locx, row: r-1, col: c-1, type: NATURALREF };
      const v = contextu.getRow(r-1, carg).getCol(c-1, carg) || { value: null, type: "ERROR" };
      const inheritedCellTrace = v[CELL_TRACE] || [];
      return {
      	...v,
          tree: { type: CELL, value: [...workbookandsheettreevalue, "R", row, "C", col] },
      	type: v.type,
          meta: { ...locx, type: CELL, row: r, col: c, absrow: row.absolute, abscol: col.absolute, notation: "R1C1", workbook: locx.workbook, sheet: locx.sheet },
          value: v.value,
          [CELL_TRACE]: inheritedCellTrace.concat([{row: row, col: c, workbook: locx.workbook, sheet: locx.sheet}]),
      };
  };
  var peg$f32 = function() { return parseInt(text(), 10); };
  var peg$f33 = function(cell) {
  				return { cell, absolute: true, tree: { type: R1C1PARTIAL, value: ["[", cell, "]"] } };
  			};
  var peg$f34 = function(cell) {
  				return { cell, absolute: false, tree: { type: R1C1PARTIAL, value: ["", cell, ""] } };
  			};
  var peg$f35 = function(loc, start, end) {
      
          const locx = loc || {};
          let contextu = context;
          if(locx.workbook) {
              contextu = contextu.getWorkbook(locx.workbook);
          }
          if(locx.sheet) {
              contextu = contextu.getSheet(locx.sheet);
          }
          const workbookandsheettreevalue = locx.absraw || locx.sheetraw ? locx.workbookraw ? [...locx.workbookraw, ...locx.sheetraw] : ["", "", "", ...locx.sheetraw] : ["", "", "", "", ""] || ["", "", "", "", ""];
          const meta = { ...locx, type: NATURALREF };
      	const results = [];
          const cellTrace = []
      	for(var row = start.meta.row; row <= end.meta.row; row++) {
            const t = [];
            for(var col = start.meta.col; col <= end.meta.col; col++) {
                const v = contextu.getRow(row-1,{...meta, row: row-1, col: col-1}).getCol(col-1,{...meta, row: row-1, col: col-1}) || { value: null, type: "ERROR" };
                cellTrace.push(...(v[CELL_TRACE] || []));
                cellTrace.push({row: row, col: col, workbook: locx.workbook, sheet: locx.sheet});
                t.push({ ...v, meta: { ...locx, type: CELL, row, col, workbook: locx.workbook, sheet: locx.sheet } });
            }
            results.push(t);
          }
          
          if(results.length === 1) {
          	return { type: LIST, value: results[0], meta, [CELL_TRACE]: cellTrace, tree: { type: RANGE, value: [...workbookandsheettreevalue, start, ":", end] } }
          }
          if(results.every(r => r.length === 1)) {
          	return { type: LIST, value: results.map(i => i[0]), meta, [CELL_TRACE]: cellTrace, tree: { type: RANGE, value: [...workbookandsheettreevalue, start, ":", end] } }
          }
          return { type: MATRIX, value: results, meta, [CELL_TRACE]: cellTrace, tree: { type: RANGE, value: [...workbookandsheettreevalue, start, ":", end] } }
      };
  var peg$f36 = function(arg0, y) { return y; };
  var peg$f37 = function(arg0) { return { type: NULL, value: undefined } };
  var peg$f38 = function(arg0, t) { return t; };
  var peg$f39 = function(arg0, args) { return { type: ARGUMENTS, value: [arg0, ...args], tree: { type: ARGUMENTS, value: [arg0, ...args.reduce((p, i) => [...p, ",", i], [])] } } };
  var peg$f40 = function() { return text() };
  var peg$f41 = function(name, arg0, y) { return y; };
  var peg$f42 = function(name, arg0) { return { type: NULL, value: undefined } };
  var peg$f43 = function(name, arg0, t) { return t; };
  var peg$f44 = function(name, arg0, args) {
      const allargs = [arg0, ...args].map(i => i || { type: NULL, [CELL_TRACE]: [] });
      const cellTrace = allargs.reduce((p, i) => p.concat(i[CELL_TRACE] || []), []);
      const argumenttree = [arg0 || "", ...args.reduce((p, i) => [...p, ",", i || ""], [])];
      if(functions[name]) {
          try {
          	const func = functions[name];
              
          	const v = func(allargs, { ...ctx, allowUnsafe, currentcell, name, raw: text(), functions, table: context, parser: parser, [CELL_TRACE]: cellTrace });
              if(!v) {
              	throw new Error("Function '"+name+"' did not return a result! Check the implementation!");
              }
              v[TRACE] = {
                  function: name,
              	arguments: allargs
              };
              v.tree = { type: FUNCTIONCALL, value: [name, "(", ...argumenttree, ")"] };
              v[CELL_TRACE] = cellTrace.concat(v[CELL_TRACE] || []);
              return v;
          } catch(e) {
          	const initialError = allargs.find((e) => e && (e.type === ERROR));
              const r = { type: ERROR, value: (initialError && initialError.value) || e.name+' in '+name+': "'+e.message+'"', meta: {  error_value: initialError, internal_error: e } }
              r.tree = { type: FUNCTIONCALL, value: [name, "(", ...argumenttree, ")"] };
              r[CELL_TRACE] = cellTrace;
              return r;
          }
      }
      if(functions[name.toUpperCase()]) {
      	return { 
              type: ERROR, value: NAMEE, meta: { error: "Unknown function "+name+". Did you mean "+name.toUpperCase()+"?" },
              tree: { type: FUNCTIONCALL, value: [name, "(", ...argumenttree, ")"] }
          };
      }
      const simiar = Object.keys(functions).find(fnc => fnc.toUpperCase() === name.toUpperCase());
      if(simiar) {
      	return {
              type: ERROR, value: NAMEE, meta: { error: "Unknown function "+name+". Did you mean "+simiar+"?" },
              tree: { type: FUNCTIONCALL, value: [name, "(", ...argumenttree, ")"] }
          };
      }
      // todo find close names
      return {
          type: ERROR, value: NAMEE, meta: { error: "Unknown function "+name }, meta: { name },
          tree: { type: FUNCTIONCALL, value: [name, "(", ...argumenttree, ")"] }
      };
  };
  var peg$f45 = function(a, b) {
      if(a.type !== LIST || b.type !== LIST) {
      	throw new Error("An intersection between anything else but LISTs is currently not supported. Expected LIST, LIST, found "+a.type+", "+b.type); 
      }
      const v = a.value.filter(i => b.value.some(j => j.meta.row === i.meta.row && j.meta.col === i.meta.col));
      const cellTrace = [].concat(...v.map(i => i[CELL_TRACE] || []));
      return {
      	type: LIST,
      	value: v,
          tree: { type: OPERATION, value: [a, " ", b] },
          meta: { type: NATURALREF },
          [CELL_TRACE]: cellTrace
      }
  };
  var peg$f46 = function(loc) { return text(); };
  var peg$f47 = function(loc, start) { return text(); };
  var peg$f48 = function(loc, start, end) {
      	if(start !== end) {
          	throw new Error("Infinite row-ranges can't span multiple columns \""+start+":"+end+"\"")
          }
          const locx = loc || {};
          let contextu = context;
          if(locx.workbook) {
              contextu = contextu.getWorkbook(locx.workbook);
          }
          if(locx.sheet) {
              contextu = contextu.getSheet(locx.sheet);
          }
          const workbookandsheettreevalue = locx.absraw || locx.sheetraw ? locx.workbookraw ? [...locx.workbookraw, ...locx.sheetraw] : ["", "", "", ...locx.sheetraw] : ["", "", "", "", ""] || ["", "", "", "", ""];
          const c = start.split("").reduce((sum, char) => sum*26+char.charCodeAt(0)-64, 0);
          const meta = { ...locx, type: NATURALREF, workbook: locx.workbook, sheet: locx.sheet };
          const v = contextu.getCol(c-1,meta).all({ col: c-1 }, meta);
          const cellTrace = [{ col: c, row: "*", workbook: locx.workbook, sheet: locx.sheet }].concat(...v.map(i => i[CELL_TRACE] || []));
          return { type: LIST, value: v, meta, [CELL_TRACE]: cellTrace, tree: { type: RANGE, value: [...workbookandsheettreevalue, start, ":", end] } };
          
      };
  var peg$f49 = function(loc, start, end) {
      	if(start !== end) {
          	throw new Error("Infinite row-ranges can't span multiple columns \""+start+":"+end+"\"")
          }
          // loc:(CellSheetWorkbook)?
          const locx = loc || {};
          let contextu = context;
          if(locx.workbook) {
              contextu = contextu.getWorkbook(locx.workbook);
          }
          if(locx.sheet) {
              contextu = contextu.getSheet(locx.sheet);
          }
          const workbookandsheettreevalue = locx.absraw || locx.sheetraw ? locx.workbookraw ? [...locx.workbookraw, ...locx.sheetraw] : ["", "", "", ...locx.sheetraw] : ["", "", "", "", ""] || ["", "", "", "", ""];
          const r = parseInt(start, 10);
          const meta = { ...contextu, type: NATURALREF, workbook: locx.workbook, sheet: locx.sheet };
          const v = contextu.getRow(r-1,meta).all({ row: r-1 },meta);
          const cellTrace = [{ row: r, col: "*", workbook: locx.workbook, sheet: locx.sheet }].concat(...v.map(i => i[CELL_TRACE] || []));
          return { type: LIST, value: v, meta, [CELL_TRACE]: cellTrace, tree: { type: RANGE, value: [...workbookandsheettreevalue, start, ":", end] } };
      };
  var peg$f50 = function(x) { return x; };
  var peg$f51 = function(unsafestart, unsafeend) {
      	const results = [];
          let start = unsafestart;
          if(unsafestart.type === ERROR && unsafestart.value === CIRCULAR) {
          	start = {...unsafestart.meta, meta: unsafestart.meta, tree: unsafestart.tree};
          }
          let end = unsafeend;
          if(unsafeend.type === ERROR && unsafeend.value === CIRCULAR) {
          	end = {...unsafeend.meta, meta: unsafeend.meta, tree: unsafeend.tree};
          }
          let contextu = context;
          const loc = {};
          if(start.meta.workbook) {
              contextu = contextu.getWorkbook(start.meta.workbook);
              loc.workbook = start.meta.workbook; // Avoid keys with undefined values
          }
          if(start.meta.sheet) {
              contextu = contextu.getSheet(start.meta.sheet);
              loc.sheet = start.meta.sheet; // Avoid keys with undefined values
          }
          const cellTrace = [];
   		let circularFlag = false;
      	for(let row = start.meta.row; row <= end.meta.row; row++) {
            const t = [];
            for(let col = start.meta.col; col <= end.meta.col; col++) {
                const v = contextu.getRow(row-1, {...loc,type: NATURALREF}).getCol(col-1, {...loc,type: NATURALREF}) || { value: null, type: "ERROR" };
                cellTrace.push(...(v[CELL_TRACE] || []));
                cellTrace.push({ row, col, workbook: start.meta.workbook, sheet: start.meta.sheet });
                if(v.type === ERROR && v.value === CIRCULAR) {
                	circularFlag = true;
                }
                t.push({ ...v, meta: { ...start.meta, type: CELL, row, col } });
                
            }
            results.push(t);
          }
          
          const tree = { type: RANGE, value: [...start.tree.value.slice(0,5), start.tree, ":", end.tree] };
          if(results.length === 1) {
          	const result = { type: LIST, value: results[0], rowspan: 1, colspan: results[0].length, meta: { ...loc, type: NATURALREF }, [CELL_TRACE]: cellTrace, tree };
          	if(circularFlag) {
                  return { type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace, tree };
              }
          	return result;
          }
          if(results.every(r => r.length === 1)) {
          	const result = { type: LIST, value: results.map(i => i[0]), rowspan: results.length, colspan: 1, meta: { ...loc, type: NATURALREF }, [CELL_TRACE]: cellTrace, tree };
          	if(circularFlag) {
                  return { type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace, tree };
              }
          	return result;
          }
          const result = {
          	type: MATRIX,
              value: results,
              tree,
              get rowspan() { return results.length }, 
              get colspan() { return results[0].length },
              meta: { ...loc, type: NATURALREF },
              [CELL_TRACE]: cellTrace
         };
         if(unsafestart.type === ERROR && unsafestart.value === CIRCULAR) {
          	return { ...unsafestart, type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace, tree };
          }
         if(circularFlag) {
         	return { type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace, tree };
         }
         
          if(unsafeend.type === ERROR && unsafeend.value === CIRCULAR) {
          	return { ...unsafeend, type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace, tree };
          }
          return result;
      };
  var peg$f52 = function() {return { type: STRING, value: "", meta: { empty: true }, tree: { type: STRING, value: ['""'] } }};
  var peg$f53 = function() { return { v: text().replace(/\\\"/g, "\""), r: text() }; };
  var peg$f54 = function(t) {return { type: STRING, value: t.v, tree: { type: STRING, value: ['"', t.r, '"'] } } };
  var peg$f55 = function(num) { return num; };
  var peg$f56 = function(sign, int, dec, percent) { 
      return { 
          type: NUMBER, 
          value: (percent === "%" ? 0.01 : 1) * parseFloat(text(), 10), 
          tree: [sign, int.join(""), dec ? "." : "", dec ? dec.join("").substring(1) : "", percent || ""] 
      }; };

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$expected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return [peg$savedPos, peg$currPos];
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
  function peg$computeLocation(startPos, endPos) {
    var loc = {};

    if ( peg$VALIDFILENAME ) loc.filename = options.filename;

    var startPosDetails = peg$computePosDetails(startPos);
    loc.start = {
      offset: startPos,
      line: startPosDetails.line,
      column: startPosDetails.column
    };

    var endPosDetails = peg$computePosDetails(endPos);
    loc.end = {
      offset: endPos,
      line: endPosDetails.line,
      column: endPosDetails.column
    };

    return loc;
  }

  function peg$begin() {
    peg$expected.push({ pos: peg$currPos, variants: [] });
  }

  function peg$expect(expected) {
    var top = peg$expected[peg$expected.length - 1];

    if (peg$currPos < top.pos) { return; }

    if (peg$currPos > top.pos) {
      top.pos = peg$currPos;
      top.variants = [];
    }

    top.variants.push(expected);
  }

  function peg$end(invert) {
    var expected = peg$expected.pop();
    var top = peg$expected[peg$expected.length - 1];
    var variants = expected.variants;

    if (top.pos !== expected.pos) { return; }

    if (invert) {
      variants = variants.map(function(e) {
        return e.type === "not" ? e.expected : { type: "not", expected: e };
      });
    }

    Array.prototype.push.apply(top.variants, variants);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found, location),
      expected,
      found,
      location
    );
  }

  function peg$buildError() {
    var expected = peg$expected[0];
    var failPos = expected.pos;

    return peg$buildStructuredError(
      expected.variants,
      failPos < input.length ? input.charAt(failPos) : null,
      failPos < input.length
        ? peg$computeLocation(failPos, failPos + 1)
        : peg$computeLocation(failPos, failPos)
    );
  }

  function peg$parseStart() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseEquasion();
    if (s0 === peg$FAILED) {
      s0 = peg$parseEscaped();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNum();
        if (s0 === peg$FAILED) {
          s0 = peg$parseBasebool();
          if (s0 === peg$FAILED) {
            s0 = peg$parseStatic();
            if (s0 === peg$FAILED) {
              s0 = peg$parseEmpty();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseBasebool() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e0);
    if (input.substr(peg$currPos, 4) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f0();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      rule$expects(peg$e1);
      if (input.substr(peg$currPos, 5) === peg$c1) {
        s1 = peg$c1;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f1();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseEmpty() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = '';
    peg$savedPos = s0;
    s1 = peg$f2();
    s0 = s1;

    return s0;
  }

  function peg$parseEquasion() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e2);
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c2;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f3(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEscaped() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e3);
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseString();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatic() {
    var s0, s1, s2;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e4);
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseString();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f5();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseString() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = [];
    rule$expects(peg$e5);
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        rule$expects(peg$e5);
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseYExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e2);
      if (input.charCodeAt(peg$currPos) === 61) {
        s5 = peg$c2;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        rule$expects(peg$e6);
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s5 = peg$c4;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          rule$expects(peg$e7);
          if (input.substr(peg$currPos, 2) === peg$c5) {
            s5 = peg$c5;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            rule$expects(peg$e8);
            if (input.substr(peg$currPos, 2) === peg$c6) {
              s5 = peg$c6;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              rule$expects(peg$e9);
              if (input.charCodeAt(peg$currPos) === 60) {
                s5 = peg$c7;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                rule$expects(peg$e10);
                if (input.charCodeAt(peg$currPos) === 62) {
                  s5 = peg$c8;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                }
              }
            }
          }
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseYExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e2);
        if (input.charCodeAt(peg$currPos) === 61) {
          s5 = peg$c2;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          rule$expects(peg$e6);
          if (input.substr(peg$currPos, 2) === peg$c4) {
            s5 = peg$c4;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            rule$expects(peg$e7);
            if (input.substr(peg$currPos, 2) === peg$c5) {
              s5 = peg$c5;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              rule$expects(peg$e8);
              if (input.substr(peg$currPos, 2) === peg$c6) {
                s5 = peg$c6;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                rule$expects(peg$e9);
                if (input.charCodeAt(peg$currPos) === 60) {
                  s5 = peg$c7;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 === peg$FAILED) {
                  rule$expects(peg$e10);
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s5 = peg$c8;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseYExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f6(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseYExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseXExpression();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e11);
      if (input.charCodeAt(peg$currPos) === 38) {
        s5 = peg$c9;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseXExpression();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e11);
        if (input.charCodeAt(peg$currPos) === 38) {
          s5 = peg$c9;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseXExpression();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f7(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseXExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseXTerm();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e12);
      if (input.charCodeAt(peg$currPos) === 43) {
        s5 = peg$c10;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        rule$expects(peg$e13);
        if (input.charCodeAt(peg$currPos) === 45) {
          s5 = peg$c11;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseXTerm();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e12);
        if (input.charCodeAt(peg$currPos) === 43) {
          s5 = peg$c10;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          rule$expects(peg$e13);
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c11;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseXTerm();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f8(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseXTerm() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseTerm();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e14);
      if (input.charCodeAt(peg$currPos) === 42) {
        s5 = peg$c12;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        rule$expects(peg$e15);
        if (input.charCodeAt(peg$currPos) === 47) {
          s5 = peg$c13;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parseTerm();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e14);
        if (input.charCodeAt(peg$currPos) === 42) {
          s5 = peg$c12;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          rule$expects(peg$e15);
          if (input.charCodeAt(peg$currPos) === 47) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseTerm();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f9(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTerm() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parsePercent();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      rule$expects(peg$e16);
      if (input.charCodeAt(peg$currPos) === 94) {
        s5 = peg$c14;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$parsePercent();
        if (s7 !== peg$FAILED) {
          s4 = [s4, s5, s6, s7];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        rule$expects(peg$e16);
        if (input.charCodeAt(peg$currPos) === 94) {
          s5 = peg$c14;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsePercent();
          if (s7 !== peg$FAILED) {
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f10(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePercent() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseNegative();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      rule$expects(peg$e17);
      if (input.charCodeAt(peg$currPos) === 37) {
        s4 = peg$c15;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f11(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNegative() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    rule$expects(peg$e13);
    if (input.charCodeAt(peg$currPos) === 45) {
      s2 = peg$c11;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseFactor();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f12(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseList() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e18);
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c16;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseInnerList();
      s4 = [];
      s5 = peg$currPos;
      rule$expects(peg$e19);
      if (input.charCodeAt(peg$currPos) === 59) {
        s6 = peg$c17;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parseInnerList();
        peg$savedPos = s5;
        s5 = peg$f13(s3, s7);
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        rule$expects(peg$e19);
        if (input.charCodeAt(peg$currPos) === 59) {
          s6 = peg$c17;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseInnerList();
          peg$savedPos = s5;
          s5 = peg$f13(s3, s7);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      rule$expects(peg$e20);
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c18;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f14(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInnerList() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseTrue();
    if (s2 === peg$FAILED) {
      s2 = peg$parseFalse();
      if (s2 === peg$FAILED) {
        s2 = peg$parseStr();
        if (s2 === peg$FAILED) {
          s2 = peg$parseNum();
        }
      }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parse_();
    s4 = [];
    s5 = peg$currPos;
    rule$expects(peg$e21);
    if (input.charCodeAt(peg$currPos) === 44) {
      s6 = peg$c19;
      peg$currPos++;
    } else {
      s6 = peg$FAILED;
    }
    if (s6 !== peg$FAILED) {
      s7 = peg$parse_();
      s8 = peg$parseTrue();
      if (s8 === peg$FAILED) {
        s8 = peg$parseFalse();
        if (s8 === peg$FAILED) {
          s8 = peg$parseStr();
          if (s8 === peg$FAILED) {
            s8 = peg$parseNum();
          }
        }
      }
      if (s8 !== peg$FAILED) {
        s9 = peg$parse_();
        peg$savedPos = s5;
        s5 = peg$f15(s2, s8);
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
    } else {
      peg$currPos = s5;
      s5 = peg$FAILED;
    }
    while (s5 !== peg$FAILED) {
      s4.push(s5);
      s5 = peg$currPos;
      rule$expects(peg$e21);
      if (input.charCodeAt(peg$currPos) === 44) {
        s6 = peg$c19;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parse_();
        s8 = peg$parseTrue();
        if (s8 === peg$FAILED) {
          s8 = peg$parseFalse();
          if (s8 === peg$FAILED) {
            s8 = peg$parseStr();
            if (s8 === peg$FAILED) {
              s8 = peg$parseNum();
            }
          }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          peg$savedPos = s5;
          s5 = peg$f15(s2, s8);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s0 = peg$f16(s2, s4);

    return s0;
  }

  function peg$parseFactor() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e22);
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c20;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        rule$expects(peg$e23);
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c21;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseList();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFunction();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIdentifyFunction();
          if (s0 === peg$FAILED) {
            s0 = peg$parseIntersection();
            if (s0 === peg$FAILED) {
              s0 = peg$parseTrue();
              if (s0 === peg$FAILED) {
                s0 = peg$parseFalse();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseFiniteRangeR1C1();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseR1C1Cell();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseInfiniteRangeAZ();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseInfiniteRange09();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseFiniteRange();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseCell();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseStr();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseNum();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTrue() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e0);
    if (input.substr(peg$currPos, 4) === peg$c0) {
      s2 = peg$c0;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f18();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFalse() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e1);
    if (input.substr(peg$currPos, 5) === peg$c1) {
      s2 = peg$c1;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f19();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCellSheetWorkbook() {
    var s0;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$parseWorkbooksheetquote();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSheetquote();
      if (s0 === peg$FAILED) {
        s0 = peg$parseWorkbooksheet();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSheet();
        }
      }
    }

    return s0;
  }

  function peg$parseSheet() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    rule$expects(peg$e24);
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      rule$expects(peg$e25);
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        rule$expects(peg$e25);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s1;
      s1 = peg$f20();
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e26);
      if (input.charCodeAt(peg$currPos) === 33) {
        s2 = peg$c22;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWorkbooksheet() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e27);
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c23;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      rule$expects(peg$e24);
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        rule$expects(peg$e28);
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          rule$expects(peg$e28);
          if (peg$r3.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s2;
        s2 = peg$f20();
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e29);
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c24;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSheet();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f22(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSheetquote() {
    var s0, s1, s2, s3, s4;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e3);
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      rule$expects(peg$e30);
      if (input.substr(peg$currPos, 2) === peg$c25) {
        s4 = peg$c25;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        rule$expects(peg$e31);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          rule$expects(peg$e30);
          if (input.substr(peg$currPos, 2) === peg$c25) {
            s4 = peg$c25;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            rule$expects(peg$e31);
            if (peg$r4.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
            }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f23();
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e3);
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c3;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e26);
          if (input.charCodeAt(peg$currPos) === 33) {
            s4 = peg$c22;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f24(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWorkbooksheetquote() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e3);
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e27);
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c23;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        rule$expects(peg$e32);
        if (input.substr(peg$currPos, 2) === peg$c26) {
          s5 = peg$c26;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          rule$expects(peg$e33);
          if (peg$r5.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
        }
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            rule$expects(peg$e32);
            if (input.substr(peg$currPos, 2) === peg$c26) {
              s5 = peg$c26;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              rule$expects(peg$e33);
              if (peg$r5.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
              }
            }
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$f25();
        }
        s3 = s4;
        if (s3 !== peg$FAILED) {
          rule$expects(peg$e29);
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c24;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = [];
            rule$expects(peg$e30);
            if (input.substr(peg$currPos, 2) === peg$c25) {
              s7 = peg$c25;
              peg$currPos += 2;
            } else {
              s7 = peg$FAILED;
            }
            if (s7 === peg$FAILED) {
              rule$expects(peg$e31);
              if (peg$r4.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
              }
            }
            if (s7 !== peg$FAILED) {
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                rule$expects(peg$e30);
                if (input.substr(peg$currPos, 2) === peg$c25) {
                  s7 = peg$c25;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  rule$expects(peg$e31);
                  if (peg$r4.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                  }
                }
              }
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              peg$savedPos = s5;
              s6 = peg$f26(s3);
            }
            s5 = s6;
            if (s5 !== peg$FAILED) {
              rule$expects(peg$e3);
              if (input.charCodeAt(peg$currPos) === 39) {
                s6 = peg$c3;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                rule$expects(peg$e26);
                if (input.charCodeAt(peg$currPos) === 33) {
                  s7 = peg$c22;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f27(s3, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCell() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseCellNoSpace();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f28(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCellNoSpace() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseCellSheetWorkbook();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    rule$expects(peg$e34);
    if (input.charCodeAt(peg$currPos) === 36) {
      s2 = peg$c27;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = [];
    rule$expects(peg$e35);
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        rule$expects(peg$e35);
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      rule$expects(peg$e34);
      if (input.charCodeAt(peg$currPos) === 36) {
        s4 = peg$c27;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$currPos;
      rule$expects(peg$e36);
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s6 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = [];
        rule$expects(peg$e37);
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s8 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
        }
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          rule$expects(peg$e37);
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
          }
        }
        peg$savedPos = s5;
        s5 = peg$f29(s1, s2, s3, s4);
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f30(s1, s2, s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseR1C1Cell() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseCellSheetWorkbook();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    rule$expects(peg$e38);
    if (input.charCodeAt(peg$currPos) === 82) {
      s3 = peg$c28;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseR1C1CellAbs();
      if (s4 !== peg$FAILED) {
        rule$expects(peg$e39);
        if (input.charCodeAt(peg$currPos) === 67) {
          s5 = peg$c29;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseR1C1CellAbs();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f31(s2, s4, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseR1C1CellAbs() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e27);
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c23;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      rule$expects(peg$e36);
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        rule$expects(peg$e37);
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          rule$expects(peg$e37);
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
        }
        peg$savedPos = s2;
        s2 = peg$f32();
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        rule$expects(peg$e29);
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c24;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f33(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      rule$expects(peg$e36);
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        rule$expects(peg$e37);
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          rule$expects(peg$e37);
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
        }
        peg$savedPos = s1;
        s1 = peg$f32();
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f34(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseFiniteRangeR1C1() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseCellSheetWorkbook();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseR1C1Cell();
    if (s3 !== peg$FAILED) {
      rule$expects(peg$e40);
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c30;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseR1C1Cell();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f35(s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIdentifyFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    rule$expects(peg$e22);
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c20;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseExpression();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$currPos;
        s6 = peg$parse_();
        rule$expects(peg$e21);
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c19;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$currPos;
          s10 = peg$parseExpression();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s9;
            s10 = peg$f36(s3, s10);
          }
          s9 = s10;
          if (s9 === peg$FAILED) {
            s9 = peg$currPos;
            s10 = '';
            peg$savedPos = s9;
            s10 = peg$f37(s3);
            s9 = s10;
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            peg$savedPos = s5;
            s5 = peg$f38(s3, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          rule$expects(peg$e21);
          if (input.charCodeAt(peg$currPos) === 44) {
            s7 = peg$c19;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$currPos;
            s10 = peg$parseExpression();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s9;
              s10 = peg$f36(s3, s10);
            }
            s9 = s10;
            if (s9 === peg$FAILED) {
              s9 = peg$currPos;
              s10 = '';
              peg$savedPos = s9;
              s10 = peg$f37(s3);
              s9 = s10;
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s5;
              s5 = peg$f38(s3, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        rule$expects(peg$e23);
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c21;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f39(s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    rule$expects(peg$e24);
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = [];
      rule$expects(peg$e41);
      if (peg$r9.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        rule$expects(peg$e41);
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
      }
      peg$savedPos = s2;
      s2 = peg$f40();
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      rule$expects(peg$e22);
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c20;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseExpression();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = [];
        s8 = peg$currPos;
        s9 = peg$parse_();
        rule$expects(peg$e21);
        if (input.charCodeAt(peg$currPos) === 44) {
          s10 = peg$c19;
          peg$currPos++;
        } else {
          s10 = peg$FAILED;
        }
        if (s10 !== peg$FAILED) {
          s11 = peg$parse_();
          s12 = peg$currPos;
          s13 = peg$parseExpression();
          if (s13 !== peg$FAILED) {
            peg$savedPos = s12;
            s13 = peg$f41(s2, s6, s13);
          }
          s12 = s13;
          if (s12 === peg$FAILED) {
            s12 = peg$currPos;
            s13 = peg$parse_();
            s14 = '';
            peg$savedPos = s12;
            s12 = peg$f42(s2, s6);
          }
          if (s12 !== peg$FAILED) {
            s13 = peg$parse_();
            peg$savedPos = s8;
            s8 = peg$f43(s2, s6, s12);
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$currPos;
          s9 = peg$parse_();
          rule$expects(peg$e21);
          if (input.charCodeAt(peg$currPos) === 44) {
            s10 = peg$c19;
            peg$currPos++;
          } else {
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            s11 = peg$parse_();
            s12 = peg$currPos;
            s13 = peg$parseExpression();
            if (s13 !== peg$FAILED) {
              peg$savedPos = s12;
              s13 = peg$f41(s2, s6, s13);
            }
            s12 = s13;
            if (s12 === peg$FAILED) {
              s12 = peg$currPos;
              s13 = peg$parse_();
              s14 = '';
              peg$savedPos = s12;
              s12 = peg$f42(s2, s6);
            }
            if (s12 !== peg$FAILED) {
              s13 = peg$parse_();
              peg$savedPos = s8;
              s8 = peg$f43(s2, s6, s12);
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        }
        rule$expects(peg$e23);
        if (input.charCodeAt(peg$currPos) === 41) {
          s8 = peg$c21;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
        }
        if (s8 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f44(s2, s6, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIntersection() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseXFiniteRange();
    if (s2 !== peg$FAILED) {
      rule$expects(peg$e42);
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c31;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parseXFiniteRange();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f45(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInfiniteRangeAZ() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseCellSheetWorkbook();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$currPos;
    s4 = [];
    rule$expects(peg$e35);
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s5 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s5 = peg$FAILED;
    }
    if (s5 !== peg$FAILED) {
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        rule$expects(peg$e35);
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
        }
      }
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      peg$savedPos = s3;
      s4 = peg$f46(s2);
    }
    s3 = s4;
    if (s3 !== peg$FAILED) {
      rule$expects(peg$e40);
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c30;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        s6 = [];
        rule$expects(peg$e35);
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            rule$expects(peg$e35);
            if (peg$r6.test(input.charAt(peg$currPos))) {
              s7 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
            }
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          peg$savedPos = s5;
          s6 = peg$f47(s2, s3);
        }
        s5 = s6;
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f48(s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInfiniteRange09() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseCellSheetWorkbook();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$currPos;
    rule$expects(peg$e36);
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s4 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
    }
    if (s4 !== peg$FAILED) {
      s5 = [];
      rule$expects(peg$e37);
      if (peg$r8.test(input.charAt(peg$currPos))) {
        s6 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        rule$expects(peg$e37);
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
      }
      peg$savedPos = s3;
      s3 = peg$f46(s2);
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      rule$expects(peg$e40);
      if (input.charCodeAt(peg$currPos) === 58) {
        s4 = peg$c30;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        rule$expects(peg$e36);
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = [];
          rule$expects(peg$e37);
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            rule$expects(peg$e37);
            if (peg$r8.test(input.charAt(peg$currPos))) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
            }
          }
          peg$savedPos = s5;
          s5 = peg$f47(s2, s3);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f49(s2, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFiniteRange() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseXFiniteRange();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f50(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseXFiniteRange() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    s1 = peg$parseCellNoSpace();
    if (s1 !== peg$FAILED) {
      rule$expects(peg$e40);
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c30;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCellNoSpace();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f51(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStr() {
    var s0, s1, s2, s3, s4, s5;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    rule$expects(peg$e43);
    if (input.substr(peg$currPos, 2) === peg$c32) {
      s1 = peg$c32;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f52();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      rule$expects(peg$e44);
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c33;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        rule$expects(peg$e45);
        if (input.substr(peg$currPos, 2) === peg$c34) {
          s5 = peg$c34;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          rule$expects(peg$e46);
          if (peg$r10.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          rule$expects(peg$e45);
          if (input.substr(peg$currPos, 2) === peg$c34) {
            s5 = peg$c34;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            rule$expects(peg$e46);
            if (peg$r10.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
          }
        }
        peg$savedPos = s3;
        s4 = peg$f53();
        s3 = s4;
        rule$expects(peg$e44);
        if (input.charCodeAt(peg$currPos) === 34) {
          s4 = peg$c33;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f54(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseNum() {
    var s0, s1, s2, s3;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e47);
    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseNumber();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f55(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parseNumber() {
    var s0, s1, s2, s3, s4, s5, s6;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = '';
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r8.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c35;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$r8.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
              }
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 37) {
          s4 = peg$c15;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f56(s1, s2, s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    var rule$expects = function (expected) {
      if (peg$silentFails === 0) peg$expect(expected);
    }

    rule$expects(peg$e48);
    peg$silentFails++;
    s0 = [];
    if (peg$r11.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r11.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
      }
    }
    peg$silentFails--;

    return s0;
  }



      const typeOrError = (type, e, conversionToType) => (t) => {
          if(t.value === "") {
              return t;
          }
          if(conversionToType === STRING && t.type === NUMBER) {
              return Object.assign(t, {
                  type: STRING,
                  value: `${t.value}`
              });
          }
          if(conversionToType === STRING && t.type === BOOLEAN) {
              return Object.assign(t, {
                  type: STRING,
                  value: t.value ? "TRUE" : "FALSE"
              });
          }
          if(conversionToType === NUMBER && t.type === BOOLEAN) {
              return Object.assign(t, {
                  type: NUMBER,
                  value: t.value ? 1 : 0
              });
          }
          if(conversionToType === NUMBER && t.type === STRING && t.value && /^[ \t\n\r]*[0-9]*(\.[0-9]*)?[ \t\n\r]*$/.test(t.value)) {
              return Object.assign(t, {
                  type: NUMBER,
                  value: parseFloat(t.value)
              });
          }
          return (type === t.type || t.type === ERROR) ? t : { type: ERROR, value: e || VVALUE, meta: t, [CELL_TRACE]: t[CELL_TRACE], tree: t.tree };
      };
      const stdop = (a,b,op,returntype,operation) => {
      	const {value:left,type:tleft,meta:{type:lstype}={}} = a;
          const {value:right,type:tright,meta:{type:rstype}={}} = b;
          const tree = { type: OPERATION, value: [a,operation,b] };
          if(tleft === ERROR) {
              const e = new Error(left.description);
              e.tree = tree;
              e.type = ERROR;
              e.value = left;
              e.meta = { ...a, [CELL_TRACE]: a[CELL_TRACE], tree };
              return e;
          }
          if(tright === ERROR) {
              const e = new Error(right.description);
              e.tree = tree;
              e.type = ERROR;
              e.value = right;
              e.meta = { ...b, [CELL_TRACE]: b[CELL_TRACE], tree };
              return e;
          }
          const Cell_Trace = [...(a[CELL_TRACE] || []),...(b[CELL_TRACE] || [])];
          const meta = {
          	left: a.meta||{},
              right: b.meta||{},
              operation
          };
          if(tleft === LIST && tright === NUMBER) {
              return { type: LIST, tree, value: left.map(({
                  value,
                  meta:m = {},
                  ...rest
              }, idx) => ({
                  ...rest,
                  type: returntype,
                  value: op(value,right),
                  meta: Object.assign(meta,{item: m,idx}),
                  [CELL_TRACE]: Cell_Trace
              })) }
          }
          if(tleft === NUMBER && tright === LIST) {
              return { type: LIST, tree, value: right.map(({
                  value,
                  meta:m = {},
                  ...rest
              },idx) => ({
                  ...rest,
                  type: returntype,
                  value: op(left,value),
                  meta: Object.assign(meta,{item: m,idx}),
                  [CELL_TRACE]: Cell_Trace
              })) }
          }
          if(tleft === LIST && tright === LIST) {
              return {
                  type: LIST,
                  tree,
                  value: left.map(({value,...rest},idx) => ({
                      ...rest,
                      ...right[idx],
                      meta: {
                          ...meta,
                          item: {
                              left: rest.meta||{},
                              right: right[idx].meta
                          },
                          idx,
                      },
                      type: returntype,
                      value: op(value,right[idx].value),
                      [CELL_TRACE]: Cell_Trace
                  }))
              }
              // todo: Maybe distiguish by natural vs inline list?
          }
          return { ...a, ...b, tree, type: returntype, value: op(left,right), meta, [CELL_TRACE]: Cell_Trace };
      };
      
      const functions = functionDefinitions;
      // dynamic, from the outside
      let xcontext = options._context;
      let currentcell = options._currentcell || {};
      let calledBy = options._calledBy || [];
      let parser = options._self;
      const allowUnsafe = options.allowUnsafe || false;
      
  	// static, internal
      const ccd = calledBy.concat([{ row: currentcell.row + 1, col: currentcell.col + 1, sheet: currentcell.sheet, workbook: currentcell.workbook }]);
      const ctx = { calledBy: ccd };

      const context = {
      	getWorkbook: wb => {
              const maybeWorkbook = xcontext.getWorkbook(wb)
              return {
                  getSheet: (sh) => {
                      const sheet = workbook.getSheet(sh);
                      const maybeSheet = sh;
                      return {
                          getRow: (row, ...rest1) => ({
                                  getCol: (col, ...rest2) => {
                                      if(ccd.some(({ row: r, col: c, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && row === (r-1) && col === (c-1))) {
                                          return { type: ERROR, value: CIRCULAR, chain: [{col, row}].concat(ccd), meta: {} };
                                      }
                                      return sheet.getRow(row, ...rest1).getCol(col, ...rest2);
                                  },
                                  all: (...rest2) => {
                                      const find = ccd.find(({ row: r, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && row === (r-1));
                                      if(find) {
                                      return { type: ERROR, value: CIRCULAR, chain: [find].concat(ccd), meta: {} };
                                      }
                                      return sheet.getRow(row, ...rest1).all(...rest2);
                                  }
                              }),
                          getCol: (col, ...rest1) => ({
                              getRow: (row, ...rest2) => {
                                  if(ccd.some(({ row: r, col: c, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && row === (r-1) && col === (c-1))) {
                                      return { type: ERROR, value: CIRCULAR, chain: [{col, row}].concat(ccd), meta: {} };
                                  }
                                  return sheet.getCol(col, ...rest1).getRow(row, ...rest2);
                              },
                              all: (...rest2) => {
                                  const find = ccd.find(({ col: c, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && col === (c-1));
                                  if(find) {
                                      return { type: ERROR, value: CIRCULAR, chain: [find].concat(ccd), meta: {} };
                                  } 
                                  return sheet.getCol(col, ...rest1).all(...rest2);
                              }
                          }),
                      };
                  },
              };
          },
      	getSheet: (sh, maybeWorkbook = currentcell.workbook) => {
              const sheet = xcontext.getSheet(sh);
              const maybeSheet = sh;
              return {
                  getRow: (row, ...rest1) => ({
                          getCol: (col, ...rest2) => {
                              if(ccd.some(({ row: r, col: c, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && row === (r-1) && col === (c-1))) {
                                  return { type: ERROR, value: CIRCULAR, chain: [{col, row}].concat(ccd), meta: {} };
                              }
                              return sheet.getRow(row, ...rest1).getCol(col, ...rest2);
                          },
                          all: (...rest2) => {
                              const find = ccd.find(({ row: r, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && row === (r-1));
                              if(find) {
                               return { type: ERROR, value: CIRCULAR, chain: [find].concat(ccd), meta: {} };
                              }
                              return sheet.getRow(row, ...rest1).all(...rest2);
                          }
                      }),
                  getCol: (col, ...rest1) => ({
                      getRow: (row, ...rest2) => {
                          if(ccd.some(({ row: r, col: c, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && row === (r-1) && col === (c-1))) {
                              return { type: ERROR, value: CIRCULAR, chain: [{col, row}].concat(ccd), meta: {} };
                          }
                          return sheet.getCol(col, ...rest1).getRow(row, ...rest2);
                      },
                      all: (...rest2) => {
                          const find = ccd.find(({ col: c, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && col === (c-1));
                          if(find) {
                              return { type: ERROR, value: CIRCULAR, chain: [find].concat(ccd), meta: {} };
                          } 
                          return sheet.getCol(col, ...rest1).all(...rest2);
                      }
                  }),
              };
          },
      	getRow: (row, ctx, maybeSheet = currentcell.sheet, maybeWorkbook = currentcell.workbook) =>
            ({ 
              getCol: (col) => {
                if(ccd.some(({ row: r, col: c, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && row === (r-1) && col === (c-1))) {
                 return { type: ERROR, value: CIRCULAR, chain: [{col, row}].concat(ccd), meta: {} };
                } 
                return xcontext.getRow(row, ctx).getCol(col, ctx)
              }, 
              all: () => {
                const find = ccd.find(({ row: r, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && row === (r-1));
                if(find) {
                 return { type: ERROR, value: CIRCULAR, chain: [find].concat(ccd), meta: {} };
                } 
                return xcontext.getRow(row, ctx).all(ctx);
              }
            }),
          getCol: (col, ctx, maybeSheet = currentcell.sheet, maybeWorkbook = currentcell.workbook) => 
            ({ 
              getRow: (row) => {
                if(ccd.some(({ row: r, col: c, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && row === (r-1) && col === (c-1))) {
                 return { type: ERROR, value: CIRCULAR, chain: [{col, row}].concat(ccd), meta: {} };
                } 
                return xcontext.getCol(col, ctx).getRow(row, ctx);
              }, 
              all: () => {
                const find = ccd.find(({ col: c, workbook: wb = currentcell.workbook, sheet: sh = currentcell.sheet }) => wb === maybeWorkbook && sh === maybeSheet && col === (c-1));
                if(find) {
                 return { type: ERROR, value: CIRCULAR, chain: [find].concat(ccd), meta: {} };
                } 
                return xcontext.getCol(col, ctx).all(ctx);
              } 
            })
      }
      


  peg$begin();
  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$expect(peg$endExpectation());
    }

    throw peg$buildError();
  }
}

export {
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};

export default {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
