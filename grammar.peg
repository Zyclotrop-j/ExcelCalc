// Excel-calc Grammar
// ==========================
//
// Accepts expressions like "=2 * (3 + 4)" or "=SUM(A2,27)" and computes their value.

{
	let Symbol = i => i;
	const CELL = Symbol("CELL");
    const STR_ESCAPED = Symbol("STR_ESCAPED");
    const STR_PLAIN = Symbol("STR_PLAIN");
    const AGGREGATE = Symbol("AGGREGATE");
    const SUBTOTAL = Symbol("SUBTOTAL");
    const NUMBER = Symbol("NUMBER");
    const COMPLEX_NUMBER = Symbol("COMPLEX_NUMBER");
    const LIST = Symbol("LIST");
    const MATRIX = Symbol("MATRIX");
    const STRING = Symbol("STRING");
    const ANY = Symbol("ANY");
    const BOOLEAN = Symbol("BOOLEAN");
    const FUNCTION = Symbol("FUNCTION");
    const ARGUMENTS = Symbol("ARGUMENTS");
    const NULL = Symbol("NULL"); // Blank cell
    const ARRAY = Symbol("ARRAY"); // return value of a array formula aka multiple return values
    const ERROR = Symbol("ERROR");
    const DATE = Symbol("DATE");
    const TIME = Symbol("TIME");
    const DATETIME = Symbol("DATETIME");
    const TRACE = Symbol("_TRACE");
    const CELL_TRACE = Symbol("_CELL_TRACE");
    const HYPERLINK = Symbol("HYPERLINK");
    const NAVALUE = Symbol("#N/A");
    const VVALUE = Symbol("#VALUE!");
    const REFVALUE = Symbol("#REF!");
    const NUMVALUE = Symbol("#NUM");
    const DIV0 = Symbol("#DIV/0!");
    const NULLE= Symbol("#NULL!");
    const NAMEE = Symbol("#NAME?");
    const GETTINGDATA= Symbol("#GETTING_DATA");
    const INLINE = Symbol("INLINE");
    const HIDDEN = Symbol("HIDDEN"); // cell visibility, set meta:{visibility:HIDDEN} when cell is hidden; effects some functions
    const NATURALREF = Symbol("NATURAL_REFERENCE");

    const CIRCULAR = Symbol("CIRCULAR_REFERENCE");
    
    const stdop = (a,b,op,returntype,operation) => {
        
    	const {value:left,type:tleft,meta:{type:lstype}={}} = a;
        const {value:right,type:tright,meta:{type:rstype}={}} = b;
        if(tleft === ERROR) {
            const e = new Error(left.description);
            e.value = a;
            throw e;
        }
        if(tright === ERROR) {
            const e = new Error(right.description);
            e.value = b;
            throw e;
        }
        const Cell_Trace = [...(a[CELL_TRACE] || []),...(b[CELL_TRACE] || [])];
        const meta = {
        	left: a.meta||{},
            right: b.meta||{},
            operation
        };
            if(tleft === LIST && tright === NUMBER) {
            	return { type: LIST, value: left.map(({
                	value,
                    meta:m = {},
                    ...rest
                }, idx) => ({
                	...rest,
                    type: returntype,
                    value: op(value,right),
                    meta: Object.assign(meta,{item: m,idx}),
                    [CELL_TRACE]: Cell_Trace
                })) }
            }
            if(tleft === NUMBER && tright === LIST) {
            	return { type: LIST, value: right.map(({
                	value,
                    meta:m = {},
                    ...rest
                },idx) => ({
                	...rest,
                    type: returntype,
                    value: op(left,value),
                    meta: Object.assign(meta,{item: m,idx}),
                    [CELL_TRACE]: Cell_Trace
                })) }
            }
            if(tleft === LIST && tright === LIST) {
            	return {
                	type: LIST,
                    value: left.map(({value,...rest},idx) => ({
                    	...rest,
                        ...right[idx],
                        meta: {
                        	...meta,
                            item: {
                            	left: rest.meta||{},
                                right: right[idx].meta
                            },
                            idx,
                        },
                        type: returntype,
                        value: op(value,right[idx].value),
                        [CELL_TRACE]: Cell_Trace
                    }))
                }
                // todo: Maybe distiguish by natural vs inline list?
            }
        	return { ...a, ...b, type: returntype, value: op(left,right), meta, [CELL_TRACE]: Cell_Trace };
    };
    
    const CC2Currency = {
    };
    
    const functions = {}
    
    // dynamic, from the outside
	let _context = [
    	[{ type: NUMBER, value: 1, formula: "" }, { type: NUMBER, value: 2, formula: "" }],
        [{ type: NUMBER, value: 3, formula: "" }, { type: NUMBER, value: 4, formula: "" }]
    ];
    let xcontext = {
		getCell: ({ row, col }) => _context[row] && _context[row][col],
    	getRow: (row) => ({ getCol: (col) => _context[row] && _context[row][col], all: () => _context[row] }),
        getCol: (col) => ({ getRow: (row) => _context[row] && _context[row][col], all: () => _context.map(i => i[col]) })
    };
    let currentcell = { row: 0, col: 0 };
    const allowUnsafe = true;
    let calledBy = [];
    let parser = (arg) => ({ type: ERROR, value: "NOT AVAILABLE IN DEVELOPMENT", meta: { arg } });
    
	// static, internal
    const ccd= calledBy.concat([currentcell]);
    const ctx = { calledBy: ccd };
    const context = {
    	getWorkbook: (workbookName) => context,
    	getSheet: (sheetName) => context,
    	getRow: (row) => 
          ({ 
            getCol: (col) => {
            	
              if(ccd.some(({ row: r, col: c }) => row === r && col === c)) {
               return { type: ERROR, value: CIRCULAR, chain: [{col, row}].concat(ccd), meta: {} };
              } 
              return xcontext.getRow(row, ctx).getCol(col, ctx)
            }, 
            all: () => {
              const find = ccd.find(({ row: r }) => row === r);
              if(find) {
               return { type: ERROR, value: CIRCULAR, chain: [find].concat(ccd), meta: {} };
              } 
              return xcontext.getRow(row, ctx).all(ctx);
            }
          }),
        getCol: (col) => 
          ({ 
            getRow: (row) => {
              if(ccd.some(({ row: r, col: c }) => row === r && col === c)) {
               return { type: ERROR, value: CIRCULAR, chain: [{col, row}].concat(ccd), meta: {} };
              } 
              return xcontext.getCol(col, ctx).getRow(row, ctx);
            }, 
            all: () => {
              const find = ccd.find(({ col: c }) => col === c);
              if(find) {
               return { type: ERROR, value: CIRCULAR, chain: [find].concat(ccd), meta: {} };
              } 
              return xcontext.getCol(col, ctx).all(ctx);
            } 
          })
    }
    
}

Start = Equasion / Escaped / Num / Static / Empty

Empty = "" { return { type: NULL, value: null } }

Equasion = "=" exp:Expression { return exp; }

Escaped = "'" str:String { return { type: STRING, value: text().substring(1), meta: { type: STR_ESCAPED } }; }

Static = [^'=+\-*/&<>\^] String? { return { type: STRING, value: text(), meta: { type: STR_PLAIN } } }

String = .+

Expression
  = head:YExpression tail:(_ ("=" / "<>" / "<=" / ">=" / "<" / ">") _ YExpression)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "=") { return stdop(result, element[3], (x,y)=>x==y, BOOLEAN, "==") }
        if (element[1] === "<") { return stdop(result, element[3], (x,y)=>x<y, BOOLEAN, "<") }
        if (element[1] === ">") { return stdop(result, element[3], (x,y)=>x>y, BOOLEAN, ">") }
        if (element[1] === "<=") { return stdop(result, element[3], (x,y)=>x<=y, BOOLEAN, "<=") }
        if (element[1] === ">=") { return stdop(result, element[3], (x,y)=>x>=y, BOOLEAN, ">=") }
        if (element[1] === "<>") { return stdop(result, element[3], (x,y)=>x!=y, BOOLEAN, "<>") }
      }, head);
    }

YExpression
  = head:XExpression tail:(_ "&" _ XExpression)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "&") { return stdop(result, element[3], (x,y)=>""+x+y, STRING, "&") }
      }, head);
    }

XExpression
  = head:XTerm tail:(_ ("+" / "-") _ XTerm)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "+") { return stdop(result, element[3], (x,y)=>x+y, NUMBER, "+") }
        if (element[1] === "-") { return stdop(result, element[3], (x,y)=>x-y, NUMBER, "-") }
      }, head);
    }

XTerm
  = head:Term tail:(_ ("*" / "/") _ Term)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "*") { return stdop(result, element[3], (x,y)=>x*y, NUMBER, "*") }
        if (element[1] === "/") { return stdop(result, element[3], (x,y)=>x/y, NUMBER, "/") }
      }, head);
    }

Term
  = head:Factor tail:(_ "^" _ Factor)* {
      return tail.reduce(function(result, element) {
        if (element[1] === "^") {
        	return stdop(result, element[3], (x,y)=>Math.pow(x,y), NUMBER, "^");
        }
      }, head);
    }

List = "{" inner:InnerList
	rows:(";" x:InnerList { return x; })* "}" {
    const Cell_Trace = inner.map(i => i[CELL_TRACE] || []);
    if(!rows.length) {
        return { type: LIST, value: inner, meta: { type: INLINE }, [CELL_TRACE]: [].concat(...Cell_Trace) };
    }
    return { type: MATRIX, value: [inner, ...rows], meta: { type: INLINE }, [CELL_TRACE]: [].concat(...Cell_Trace) };
}

InnerList = member:(True / False / Str / Num)? members:("," x:(True / False / Str / Num) {return x;})* { return [member || { type: NULL }, ...members]; }

Factor
  = "(" _ expr:Expression _ ")" { return expr; }
   / List / Function / IdentifyFunction / Intersection / True / False / FiniteRangeR1C1 / R1C1Cell / InfiniteRangeAZ / InfiniteRange09 / FiniteRange / Cell / Str / Num

True = _ "TRUE" _ { return { type: BOOLEAN, value: true, [CELL_TRACE]: [] } } 

False = _ "FALSE" _ { return { type: BOOLEAN, value: false, [CELL_TRACE]: [] } }

CellSheetWorkbook
	= Workbooksheetquote / Sheetquote / Workbooksheet / Sheet
    
Sheet = t:([a-zA-Z][a-zA-Z0-9_]* { return text(); }) "!" { return { sheet: t }; }
Workbooksheet = "[" t:([a-zA-Z][a-zA-Z0-9_.]* { return text(); })  "]" s:Sheet { return { ...s, workbook: t } }
Sheetquote = "'" t:( ("\\'" / [^'])+ { return text().replace(/\\'/g, "'"); } ) "'" "!" { return { sheet: t }  }
Workbooksheetquote = 
	"'"
    	"[" t1:( ("\\]" / [^\]])+ { return text().replace(/\\\]/g, "]"); } ) "]"
		t2:( ("\\'" / [^'])+ { return text().replace(/\\'/g, "'"); } ) 
    "'" "!" { return { sheet: t2, workbook: t1 }  }
Cell
    = _ CellNoSpace _

CellNoSpace
	= loc:(CellSheetWorkbook)? abscol:"$"? col:[A-Z]+ absrow:"$"? row:([1-9][0-9]* { return parseInt(text(), 10); }) {
    const c = col.reduce((sum, char) => sum*26+char.charCodeAt(0)-64, 0);
    const { row: crow, col: ccol } = currentcell;
    // loc:(CellSheetWorkbook)?
    const locx = loc || {};
    let contextu = context;
    if(locx.workbook) {
    	contextu = contextu.getWorkbook(locx.workbook);
    }
    if(locx.sheet) {
    	contextu = contextu.getWorkbook(locx.sheet);
    }
    const carg = { ...locx, row: row-1, col: c-1, type: NATURALREF };
    const v = contextu.getRow(row-1, carg).getCol(c-1, carg) || { value: null, type: "ERROR" };
    const inheritedCellTrace = v[CELL_TRACE] || [];
    const result = {
    	...v,
    	type: v.type,
        meta: { ...locx, type: CELL, row: row, col: c, absrow: absrow === "$", abscol: abscol === "$" },
        value: v.value,
        [CELL_TRACE]: inheritedCellTrace.concat([{row: row, col: c}]),
    };
    return result;
}

R1C1Cell
	= _ loc:(CellSheetWorkbook)? "R" row:R1C1CellAbs "C" col:R1C1CellAbs _ {
    const { row: crow, col: ccol } = currentcell;
    let r = row.absolute ? row.cell : crow + row.cell;
    let c = col.absolute ? col.cell : ccol + col.cell;
    
    // loc:(CellSheetWorkbook)?
    const locx = loc || {};
    let contextu = context;
    if(locx.workbook) {
    	contextu = contextu.getWorkbook(locx.workbook);
    }
    if(locx.sheet) {
    	contextu = contextu.getWorkbook(locx.sheet);
    }
    const carg = { ...locx, row: r-1, col: c-1, type: NATURALREF };
    const v = contextu.getRow(r-1, carg).getCol(c-1, carg) || { value: null, type: "ERROR" };
    const inheritedCellTrace = v[CELL_TRACE] || [];
    return {
    	...v,
    	type: v.type,
        meta: { ...locx, type: CELL, row: r, col: c, absrow: row.absolute, abscol: col.absolute, notation: "R1C1" },
        value: v.value,
        [CELL_TRACE]: inheritedCellTrace.concat([{row: row, col: c}]),
    };
}

R1C1CellAbs = "[" cell:([1-9][0-9]* { return parseInt(text(), 10); }) "]" {
				return { cell, absolute: true };
			} / cell:([1-9][0-9]* { return parseInt(text(), 10); }) {
				return { cell, absolute: false };
			}

FiniteRangeR1C1
	= _ loc:(CellSheetWorkbook)? start:R1C1Cell ":" end:R1C1Cell _ {
    
    	// loc:(CellSheetWorkbook)?
        const locx = loc || {};
        let contextu = context;
        if(locx.workbook) {
            contextu = contextu.getWorkbook(locx.workbook);
        }
        if(locx.sheet) {
            contextu = contextu.getWorkbook(locx.sheet);
        }
        const meta = { ...locx, type: NATURALREF };
    	const results = [];
        const cellTrace = []
    	for(var row = start.meta.row; row <= end.meta.row; row++) {
          const t = [];
          for(var col = start.meta.col; col <= end.meta.col; col++) {
              const v = contextu.getRow(row-1,{...meta, row: row-1, col: col-1}).getCol(col-1,{...meta, row: row-1, col: col-1}) || { value: null, type: "ERROR" };
              cellTrace.push(...(v[CELL_TRACE] || []));
              t.push({ ...v, meta: { ...locx, type: CELL, row, col } });
          }
          results.push(t);
        }
        
        if(results.length === 1) {
        	return { type: LIST, value: results[0], meta, [CELL_TRACE]: cellTrace }
        }
        if(results.every(r => r.length === 1)) {
        	return { type: LIST, value: results.map(i => i[0]), meta, [CELL_TRACE]: cellTrace }
        }
        return { type: MATRIX, value: results, meta, [CELL_TRACE]: cellTrace }
    }

IdentifyFunction = _ "(" arg0:Arg args:(_ "," _ t:(y:Arg { return y; } / "" { return { type: NULL, value: undefined } }) _ { return t; })* ")" _ { return { type: ARGUMENTS, value: [arg0, ...args] } }

Function
	= name:([a-zA-Z][a-zA-Z0-9.]* { return text() }) _ "(" arg0:Arg? args:(_ "," _ t:(y:Arg { return y; } / "" { return { type: NULL, value: undefined } }) _ { return t; })* ")" {
	if(functions[name]) {
    	const allargs = [arg0, ...args].map(i => i || { type: NULL, [CELL_TRACE]: [] });
        const cellTrace = allargs.reduce((p, i) => p.concat(i[CELL_TRACE] || []), []);
        try {
        	const func = functions[name];
            
        	const v = func(allargs, { ...ctx, allowUnsafe, currentcell, name, raw: text(), functions, table: context, parser: parser, [CELL_TRACE]: cellTrace });
            if(!v) {
            	throw new Error("Function '"+name+"' did not return a result! Check the implementation!");
            }
            v[TRACE] = {
                function: name,
            	arguments: allargs
            };
            v[CELL_TRACE] = cellTrace.concat(v[CELL_TRACE] || []);
            return v;
        } catch(e) {
        	const initialError = allargs.find((e) => e && (e.type === ERROR));
            const r = { type: ERROR, value: (initialError && initialError.value) || e.name+' in '+name+': "'+e.message+'"', meta: {  error_value: initialError, internal_error: e } }
            r[CELL_TRACE] = cellTrace;
            return r;
        }
    }
    if(functions[name.toUpperCase()]) {
    	return { type: ERROR, value: NAMEE, meta: { error: "Unknown function "+name+". Did you mean "+name.toUpperCase()+"?" } };
    }
    const simiar = Object.keys(functions).find(fnc => fnc.toUpperCase() === name.toUpperCase());
    if(simiar) {
    	return { type: ERROR, value: NAMEE, meta: { error: "Unknown function "+name+". Did you mean "+simiar+"?" } };
    }
    // todo find close names
    return { type: ERROR, value: NAMEE, meta: { error: "Unknown function "+name } };
}

Arg
	= Expression

Intersection
	= _ a:XFiniteRange " " b:XFiniteRange _ {
    if(a.type !== LIST || b.type !== LIST) {
    	throw new Error("An intersection between anything else but LISTs is currently not supported. Expected LIST, LIST, found "+a.type+", "+b.type); 
    }
    const v = a.value.filter(i => b.value.some(j => j.meta.row === i.meta.row && j.meta.col === i.meta.col));
    const cellTrace = [].concat(...v.map(i => i[CELL_TRACE] || []));
    return {
    	type: LIST,
    	value: v,
        meta: { type: NATURALREF },
        [CELL_TRACE]: cellTrace
    }
}

InfiniteRangeAZ
	= _ loc:(CellSheetWorkbook)? start:([A-Z]+ { return text(); }) ":" end:([A-Z]+ { return text(); }) _ {
    	if(start !== end) {
        	throw new Error("Infinite row-ranges can't span multiple columns \""+start+":"+end+"\"")
        }
        // loc:(CellSheetWorkbook)?
        const locx = loc || {};
        let contextu = context;
        if(locx.workbook) {
            contextu = contextu.getWorkbook(locx.workbook);
        }
        if(locx.sheet) {
            contextu = contextu.getWorkbook(locx.sheet);
        }
        const c = start.split("").reduce((sum, char) => sum*26+char.charCodeAt(0)-64, 0);
        const meta = { ...locx, type: NATURALREF };
        const v = contextu.getCol(c-1,meta).all({ col: c-1 }, meta);
        const cellTrace = [{ col: c, row: "*" }].concat(...v.map(i => i[CELL_TRACE] || []));
        return { type: LIST, value: v, meta, [CELL_TRACE]: cellTrace };
        
    }
  
InfiniteRange09  
	= _ loc:(CellSheetWorkbook)? start:([1-9][0-9]* { return text(); }) ":" end:([1-9][0-9]* { return text(); }) _ {
    	if(start !== end) {
        	throw new Error("Infinite row-ranges can't span multiple columns \""+start+":"+end+"\"")
        }
        // loc:(CellSheetWorkbook)?
        const locx = loc || {};
        let contextu = context;
        if(locx.workbook) {
            contextu = contextu.getWorkbook(locx.workbook);
        }
        if(locx.sheet) {
            contextu = contextu.getWorkbook(locx.sheet);
        }
        const r = parseInt(start, 10);
        const meta = { ...contextu, type: NATURALREF };
        const v = contextu.getRow(r-1,meta).all({ row: r-1 },meta);
        const cellTrace = [{ row: r, col: "*" }].concat(...v.map(i => i[CELL_TRACE] || []));
        return { type: LIST, value: v, meta, [CELL_TRACE]: cellTrace };
    }

FiniteRange = _ x:XFiniteRange _ { return x; }

XFiniteRange
	= unsafestart:CellNoSpace ":" unsafeend:CellNoSpace {
    	const results = [];
        let start = unsafestart;
        if(unsafestart.type === ERROR && unsafestart.value === CIRCULAR) {
        	start = {...unsafestart.meta, meta: unsafestart.meta};
        }
        let end = unsafeend;
        if(unsafeend.type === ERROR && unsafeend.value === CIRCULAR) {
        	end = {...unsafeend.meta, meta: unsafeend.meta};
        }
        let contextu = context;
        const loc = {};
        if(start.meta.workbook) {
            contextu = contextu.getWorkbook(start.meta.workbook);
            loc.workbook = start.meta.workbook; // Avoid keys with undefined values
        }
        if(start.meta.sheet) {
            contextu = contextu.getWorkbook(start.meta.sheet);
            loc.sheet = start.meta.sheet; // Avoid keys with undefined values
        }
        const cellTrace = [];
 		let circularFlag = false;
    	for(let row = start.meta.row; row <= end.meta.row; row++) {
          const t = [];
          for(let col = start.meta.col; col <= end.meta.col; col++) {
              const v = contextu.getRow(row-1, {...loc,type: NATURALREF}).getCol(col-1, {...loc,type: NATURALREF}) || { value: null, type: "ERROR" };
              cellTrace.push(...(v[CELL_TRACE] || []));
              cellTrace.push({ row, col });
              if(v.type === ERROR && v.value === CIRCULAR) {
              	circularFlag = true;
              }
              t.push({ ...v, meta: { ...start.meta, type: CELL, row, col } });
              
          }
          results.push(t);
        }
        
        if(results.length === 1) {
        	const result = { type: LIST, value: results[0], rowspan: 1, colspan: results[0].length, meta: { ...loc, type: NATURALREF }, [CELL_TRACE]: cellTrace };
        	if(circularFlag) {
                return { type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace };
            }
        	return result;
        }
        if(results.every(r => r.length === 1)) {
        	const result = { type: LIST, value: results.map(i => i[0]), rowspan: results.length, colspan: 1, meta: { ...loc, type: NATURALREF }, [CELL_TRACE]: cellTrace };
        	if(circularFlag) {
                return { type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace };
            }
        	return result;
        }
        const result = {
        	type: MATRIX,
            value: results,
            get rowspan() { return results.length }, 
            get colspan() { return results[0].length },
            meta: { ...loc, type: NATURALREF },
            [CELL_TRACE]: cellTrace
       };
       if(unsafestart.type === ERROR && unsafestart.value === CIRCULAR) {
        	return { ...unsafestart, type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace };
        }
       if(circularFlag) {
       	return { type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace };
       }
       
        if(unsafeend.type === ERROR && unsafeend.value === CIRCULAR) {
        	return { ...unsafeend, type: ERROR, value: CIRCULAR, meta: result, [CELL_TRACE]: cellTrace };
        }
        return result;
    }

Str
	 = "\"\"" {return { type: STRING, value: "", meta: { empty: true } }} /  _ "\"" t:( ("\\\"" / [^"])* { return text().replace(/\\\"/g, "\""); } ) "\"" _ {return { type: STRING, value: t } }

Num "number"
  = _ num:Number _ { return num; }

Number = ("+" / "-" / "") [0-9]+ ("." [0-9]+)? percent:"%"? { return { type: NUMBER, value: (percent === "%" ? 0.01 : 1) * parseFloat(text(), 10) }; }

_ "whitespace"
  = [ \t\n\r]*
